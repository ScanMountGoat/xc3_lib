program     = { SOI ~ instruction* ~ end_of_program ~ EOI }
instruction = { cf_inst | cf_exp_inst | tex_clause | alu_clause }

number     =  { ('0'..'9')+ }
hex_number = @{ "0x" ~ ('0'..'9' | 'A'..'F' | 'a'..'f')+ }
float      = @{ "-"? ~ ('0'..'9')+ ~ ("." ~ ('0'..'9')+ ~ ("e-" ~ ('0'..'9')+)?)? ~ "f"? }

cf_inst        = { inst_count ~ cf_opcode ~ cf_inst_properties }
cf_exp_inst    = { inst_count ~ exp_opcode ~ ":" ~ (exp_pix_target | exp_pos_target | exp_param_target) ~ "," ~ exp_src ~ cf_inst_properties }
tex_clause     = { inst_count ~ tex_clause_inst_type ~ ":" ~ tex_clause_properties ~ (tex_inst)* }
alu_clause     = { inst_count ~ alu_clause_inst_type ~ ":" ~ alu_clause_properties ~ (alu_group)* }
end_of_program = { "END_OF_PROGRAM" }

inst_count        =  { number }
gpr               = ${ "R" ~ number }
gpr_rel           = ${ "R[AL" ~ "+" ~ number ~ "]" }
constant_file     = ${ "C" ~ number }
constant_cache0   = ${ "KC0" ~ "[" ~ number ~ "]" }
constant_cache1   = ${ "KC1" ~ "[" ~ number ~ "]" }
previous_scalar   = ${ "PS" ~ number }
previous_vector   = ${ "PV" ~ number }
one_comp_swizzle  = ${ "." ~ ("x" | "y" | "z" | "w" | "X" | "Y" | "Z" | "W") }
four_comp_swizzle = ${ "." ~ ("x" | "y" | "z" | "w" | "X" | "Y" | "Z" | "W" | "0" | "1" | "_")+ }
literal           =  { hex_number | float | "(" ~ hex_number ~ "," ~ float ~ ")" }
write_mask        = ${ "_"+ }
negate            = ${ "-" }

alu_clause_inst_type = {
    "ALU_PUSH_BEFORE"
  | "ALU_POP_AFTER"
  | "ALU_POP2_AFTER"
  | "ALU_EXT"
  | "ALU_CONTINUE"
  | "ALU_BREAK"
  | "ALU_ELSE_AFTER"
  | "ALU"
}
tex_clause_inst_type = { "TEX_ACK" | "TEX" }
vtx_clause_inst_type = { "VTX_ACK" | "VTX_TC_ACK" | "VTX_TC" | "VTX" }
cf_opcode            = {
    "NOP"
  | "LOOP_START_NO_AL"
  | "LOOP_START_DX10"
  | "LOOP_START"
  | "LOOP_END"
  | "LOOP_CONTINUE"
  | "LOOP_BREAK"
  | "JUMP"
  | "PUSH_ELSE"
  | "PUSH"
  | "ELSE"
  | "POP_PUSH_ELSE"
  | "POP_PUSH"
  | "POP_JUMP"
  | "POP"
  | "CALL_FS"
  | "CALL"
  | "RETURN"
  | "EMIT_CUT_VERTEX"
  | "EMIT_VERTEX"
  | "CUT_VERTEX"
  | "KILL"
  | "WAIT_ACK"
  | "END_PROGRAM"
}

tex_clause_properties = { ((addr | cnt | cf_const | cnd | whole_quad_mode | no_barrier | valid_pix))* }
alu_clause_properties = { ((addr | cnt | kcache0 | kcache1 | uses_waterfall | whole_quad_mode | no_barrier))* }
cf_inst_properties    = { ((addr | cnt | cf_const | pop_cnt | elem_size | burstcnt | kcache0 | kcache1 | uses_waterfall | whole_quad_mode | no_barrier | valid_pix | fail_jump_addr | pass_jump_addr))* }
burstcnt              = { "BURSTCNT(" ~ number ~ ")" }
addr                  = { "ADDR(" ~ number ~ ")" }
cf_const              = { "CF_CONST(" ~ number ~ ")" }
cnt                   = { "CNT(" ~ number ~ ")" }
cnd                   = { "CND(" ~ ("ACTIVE" | "FALSE" | "BOOL" | "NOT_BOOL") ~ ")" }
elem_size             = { "ELEM_SIZE(" ~ number ~ ")" }
kcache0               = { "KCACHE0" ~ "(" ~ "CB" ~ number ~ ":" ~ number ~ "-" ~ number ~ ")" }
kcache1               = { "KCACHE1" ~ "(" ~ "CB" ~ number ~ ":" ~ number ~ "-" ~ number ~ ")" }
no_barrier            = { "NO_BARRIER" }
pop_cnt               = { "POP_CNT(" ~ number ~ ")" }
uses_waterfall        = { "USES_WATERFALL" }
valid_pix             = { "VALID_PIX" }
whole_quad_mode       = { "WHOLE_QUAD_MODE" | "WHOLE_QUAD" }
fail_jump_addr        = { "FAIL_JUMP_ADDR(" ~ number ~ ")" }
pass_jump_addr        = { "PASS_JUMP_ADDR(" ~ number ~ ")" }

exp_src          =  { (gpr | gpr_rel) ~ four_comp_swizzle? }
exp_opcode       =  { "EXP_DONE" | "EXP" }
exp_pix_target   = ${ "PIX" ~ number }
exp_pos_target   = ${ "POS" ~ number }
exp_param_target = ${ "PARAM" ~ number }

tex_inst        =  { inst_count ~ tex_opcode ~ tex_dst ~ "," ~ tex_src ~ "," ~ tex_resource_id ~ "," ~ tex_sampler_id ~ tex_properties }
tex_opcode      =  {
    "VTX_FETCH"
  | "VTX_SEMANTIC"
  | "MEM"
  | "LD"
  | "GET_TEXTURE_INFO"
  | "GET_SAMPLE_INFO"
  | "GET_COMP_TEX_LOD"
  | "GET_GRADIENTS_H"
  | "GET_GRADIENTS_V"
  | "GET_LERP"
  | "KEEP_GRADIENTS"
  | "SET_GRADIENTS_H"
  | "SET_GRADIENTS_V"
  | "PASS"
  | "SET_CUBEMAP_INDEX"
  | "FETCH4"
  | "SAMPLE_C_G_LZ"
  | "SAMPLE_C_G_LB"
  | "SAMPLE_C_G_L"
  | "SAMPLE_C_G"
  | "SAMPLE_C_LZ"
  | "SAMPLE_C_LB"
  | "SAMPLE_C_L"
  | "SAMPLE_C"
  | "SAMPLE_G_LZ"
  | "SAMPLE_G_LB"
  | "SAMPLE_G_L"
  | "SAMPLE_G"
  | "SAMPLE_LZ"
  | "SAMPLE_LB"
  | "SAMPLE_L"
  | "SAMPLE"
  | "SET_TEXTURE_OFFSETS"
  | "GATHER4_C_O"
  | "GATHER4_O"
  | "GATHER4_C"
  | "GATHER4"
  | "GET_BUFFER_RESINFO"
}
tex_dst         =  { (gpr ~ tex_rel? ~ four_comp_swizzle?) | write_mask }
tex_src         =  { gpr ~ tex_rel? ~ four_comp_swizzle? }
tex_rel         =  { "[AL]" }
tex_resource_id = @{ "t" ~ number }
tex_sampler_id  = @{ "s" ~ number }
tex_properties  =  { ((alt_const | bc_frac_mode | denorm | norm | lod | whole_quad_mode | xoffset | yoffset | zoffset))* }
alt_const       =  { "ALT_CONST" }
bc_frac_mode    =  { "BC_FRAC_MODE" }
denorm          =  { "DENORM(" ~ ("x" | "y" | "z" | "w" | "X" | "Y" | "Z" | "W")+ ~ ")" }
norm            =  { "NORM(" ~ ("x" | "y" | "z" | "w" | "X" | "Y" | "Z" | "W")+ ~ ")" }
lod             =  { "LOD(" ~ float ~ ")" }
xoffset         =  { "XOFFSET(" ~ float ~ ")" }
yoffset         =  { "YOFFSET(" ~ float ~ ")" }
zoffset         =  { "ZOFFSET(" ~ float ~ ")" }

alu_group           =  { inst_count ~ ((alu_scalar3 | alu_scalar2 | alu_scalar1 | alu_scalar0))+ }
alu_unit            =  { "x" | "y" | "z" | "w" | "t" }
alu_scalar0         =  { alu_unit ~ ":" ~ alu_opcode0 ~ alu_output_modifier? ~ alu_dst ~ alu_properties }
alu_scalar1         =  { alu_unit ~ ":" ~ alu_opcode1 ~ alu_output_modifier? ~ alu_dst ~ "," ~ alu_src ~ alu_properties }
alu_scalar2         =  { alu_unit ~ ":" ~ alu_opcode2 ~ alu_output_modifier? ~ alu_dst ~ "," ~ alu_src ~ "," ~ alu_src ~ alu_properties }
alu_scalar3         =  { alu_unit ~ ":" ~ alu_opcode3 ~ alu_dst ~ "," ~ alu_src ~ "," ~ alu_src ~ "," ~ alu_src ~ alu_properties }
alu_opcode0         =  { "NOP" | "SET_MODE" | "SET_CF_IDX0" | "SET_CF_IDX1" }
alu_opcode1         =  {
    "FLT64_TO_FLT32"
  | "FLT32_TO_FLT64"
  | "FREXP_64"
  | "FRACT"
  | "TRUNC"
  | "CEIL"
  | "RNDNE"
  | "FLOOR"
  | "MOVA_FLOOR"
  | "MOVA_INT"
  | "MOVA"
  | "MOV"
  | "EXP_IEEE"
  | "LOG_CLAMPED"
  | "LOG_IEEE"
  | "RECIP_CLAMPED"
  | "RECIP_IEEE"
  | "RECIP_UINT"
  | "RECIP_INT"
  | "RECIP_FF"
  | "RECIPSQRT_CLAMPED"
  | "RECIPSQRT_IEEE"
  | "RECIPSQRT_FF"
  | "SQRT_IEEE"
  | "FLT_TO_INT"
  | "INT_TO_FLT"
  | "UINT_TO_FLT"
  | "FLT_TO_UINT"
  | "SIN"
  | "COS"
  | "FRACT_64"
  | "SQRT_e"
  | "EXP_e"
  | "LOG_e"
  | "RSQ_e"
  | "RCP_e"
  | "LOG_sat"
}
alu_opcode2         =  {
    "MULHI_INT24"
  | "MULLO_INT"
  | "MULHI_INT"
  | "MULLO_UINT"
  | "MULHI_UINT"
  | "MUL_INT24"
  | "MUL_IEEE"
  | "MUL_e"
  | "MUL_64"
  | "MUL"
  | "MAX_DX10"
  | "MAX_UINT"
  | "MAX_INT"
  | "MAX"
  | "MIN_DX10"
  | "MIN_UINT"
  | "MIN_INT"
  | "MIN"
  | "SETE_DX10"
  | "SETGT_DX10"
  | "SETGE_DX10"
  | "SETNE_DX10"
  | "ADD_INT"
  | "ADD_64"
  | "ADD"
  | "PRED_SETGT_PUSH_INT"
  | "PRED_SETGT_PUSH"
  | "PRED_SETGT_UINT"
  | "PRED_SETGT_INT"
  | "PRED_SETGT_64"
  | "PRED_SETGT"
  | "PRED_SETGE_PUSH_INT"
  | "PRED_SETGE_PUSH"
  | "PRED_SETGE_UINT"
  | "PRED_SETGE_INT"
  | "PRED_SETGE_64"
  | "PRED_SETGE"
  | "PRED_SETE_PUSH_INT"
  | "PRED_SETE_INT"
  | "PRED_SETE_PUSH"
  | "PRED_SETE_64"
  | "PRED_SETE"
  | "PRED_SETNE_PUSH_INT"
  | "PRED_SETNE_PUSH"
  | "PRED_SETNE_INT"
  | "PRED_SETNE"
  | "PRED_SETLT_PUSH_INT"
  | "PRED_SETLE_PUSH_INT"
  | "PRED_SET_INV"
  | "PRED_SET_POP"
  | "PRED_SET_CLR"
  | "PRED_SET_RESTORE"
  | "KILLGT"
  | "KILLGE"
  | "KILLNE"
  | "AND_INT"
  | "OR_INT"
  | "XOR_INT"
  | "NOT_INT"
  | "SUB_INT"
  | "SETE_INT"
  | "SETGT_INT"
  | "SETGE_INT"
  | "SETNE_INT"
  | "SETGT_UINT"
  | "SETGE_UINT"
  | "KILLGT_UINT"
  | "KILLGE_UINT"
  | "KILLE_INT"
  | "KILLGT_INT"
  | "KILLGE_INT"
  | "KILLNE_INT"
  | "DOT4_IEEE"
  | "DOT4_e"
  | "DOT4"
  | "CUBE"
  | "MAX4"
  | "GROUP_BARRIER"
  | "GROUP_SEQ_BEGIN"
  | "GROUP_SEQ_END"
  | "SET_LDS_SIZE"
  | "MOVA_GPR_INT"
  | "ASHR_INT"
  | "LSHR_INT"
  | "LSHL_INT"
  | "LDEXP_64"
  | "PREDGT"
  | "SETE"
  | "SETGT"
  | "SETGE"
  | "SETNE"
  | "KILLE"
}
alu_opcode3         =  {
    "BFE_UINT"
  | "BFE_INT"
  | "BFI_INT"
  | "FMA"
  | "MULADD_64_D2"
  | "MULADD_64_M4"
  | "MULADD_64_M2"
  | "MULADD_64"
  | "MUL_LIT_D2"
  | "MUL_LIT_M4"
  | "MUL_LIT_M2"
  | "MUL_LIT"
  | "MULADD_IEEE_D2"
  | "MULADD_IEEE_M4"
  | "MULADD_IEEE_M2"
  | "MULADD_IEEE"
  | "MULADD_D2"
  | "MULADD_M4"
  | "MULADD_M2"
  | "MULADD_e"
  | "MULADD"
  | "CNDGE_INT"
  | "CNDGE"
  | "CNDGT_INT"
  | "CNDGT"
  | "CNDE_INT"
  | "CNDE"
}
alu_output_modifier =  { "*2" | "*4" | "/2" | "/4" }
alu_rel             = @{ ("[AR." ~ ("x" | "y" | "z" | "w" | "t" | "X" | "Y" | "Z" | "W" | "T") ~ "]") | "[AL]" }
alu_dst             =  { (gpr ~ alu_rel? ~ one_comp_swizzle?) | write_mask }
alu_src             =  { negate? ~ (alu_abs_src_value | alu_src_value) ~ alu_rel? ~ one_comp_swizzle? }
alu_abs_src_value   =  { "|" ~ alu_src_value ~ one_comp_swizzle? ~ "|" }
alu_src_value       =  { gpr | constant_cache0 | constant_cache1 | constant_file | literal | previous_scalar | previous_vector }
alu_properties      =  { ((bank_swizzle | update_exec_mask | update_pred | pred_sel | clamp))* }
update_pred         =  { "UPDATE_PRED" }
pred_sel            =  { "PRED_SEL_OFF" | "PRED_SEL_ZERO" | "PRED_SEL_ONE" }
clamp               =  { "CLAMP" }
update_exec_mask    =  { "UPDATE_EXEC_MASK" ~ ("(" ~ execute_mask_op ~ ")")? }
execute_mask_op     =  { "DEACTIVATE" | "BREAK" | "CONTINUE" | "KILL" }
bank_swizzle        =  { "SCL_210" | "SCL_122" | "SCL_212" | "SCL_221" | "VEC_012" | "VEC_021" | "VEC_120" | "VEC_102" | "VEC_201" | "VEC_210" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
